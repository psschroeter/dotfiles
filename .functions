# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
dataurl() {
	echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Gzip-enabled `curl`
function gurl() {
	curl -sH "Accept-Encoding: gzip" "$@" | gunzip
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}


function grepvars () { perl -ne 'print if s/.*(#{.*}).*/\1/' $1 | sort | uniq;  }

function frb () {
  find . -name '*rb'  -exec grep -Hin $1 {} \;
  find . -name '*yml'  -exec grep -Hin $1 {} \;
  find . -name '*json'  -exec grep -Hin $1 {} \;
  find . -name '*sh'  -exec grep -Hin $1 {} \;
}

function gin () {
  grep -rin $1 .
}

function check_syntax () {
  find . -name '*.rb'  -exec ruby -c {} \;
}

function link_remote () {
  git config branch.$1.remote origin
  git config branch.$1.merge refs/heads/$1
}

function mp() {
  cd ~/Documents/$1
  open -a TextMate ~/Documents/textmate\ projects/$1.tmproj
}

function remove_git_merged_branches {
  current_branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  if [ "$current_branch" != "master" ]; then
    echo "WARNING: You are on branch $current_branch, NOT master."
  fi
    echo "Fetching merged branches..."
  git remote prune origin
  remote_branches=$(git branch -r --merged | grep -v '/master$' | grep -v "/$current_branch$")
  local_branches=$(git branch --merged | grep -v 'master$' | grep -v "$current_branch$")
  if [ -z "$remote_branches" ] && [ -z "$local_branches" ]; then
    echo "No existing branches have been merged into $current_branch."
  else
    echo "This will remove the following branches:"
    if [ -n "$remote_branches" ]; then
      echo "$remote_branches"
    fi
    if [ -n "$local_branches" ]; then
      echo "$local_branches"
    fi
    read -p "Continue? (y/n): " -n 1 choice
    echo
    if [ "$choice" == "y" ] || [ "$choice" == "Y" ]; then
      # Remove remote branches
      git push origin `git branch -r --merged | grep -v '/master$' | grep -v "/$current_branch$" | sed 's/origin\//:/g' | tr -d '\n'`
      # Remove local branches
      git branch -d `git branch --merged | grep -v 'master$' | grep -v "$current_branch$" | sed 's/origin\///g' | tr -d '\n'`
    else
      echo "No branches removed."
    fi
  fi
}

function open_root {
  ssh -t rightscale@$1 'sudo bash -c "mkdir -p /root/.ssh"'
  ssh -t rightscale@$1 'sudo bash -c "cat /home/rightscale/.ssh/authorized_keys  | grep peter.schroeter | sed s/.*ssh-rsa/ssh-rsa/  >> /root/.ssh/authorized_keys"'
}

function git_branch_compare {
  git log --left-right --graph --cherry-pick --oneline $1...$2
}

function rpmtar {
  rpm2cpio $1 | cpio -idmv
}

function git_hooks_install {
  find . -type d -path '*.git/hooks' -exec cp ~/.githooks/* {} \;
}

function git_gh_push_branch {
  local branch=`git branch | grep '*' | cut -d" " -f 2`
  git push origin -u $branch
}

function rbuse() {
  local pattern="^$1"

  for installed_version in `rbenv versions`; do
    if [[ $installed_version =~ $pattern ]]; then
      echo "Using rbenv version $installed_version"
      export RBENV_VERSION=$installed_version
      break
    fi
  done
}

function dev_tag() {
  local server=$1
  local cookbook=$2
  if [ -z "$2" ]; then
    cookbook=rightimage
  fi
  ruby << EOF
require "rest_connection"
tag = "rs_agent_dev:dev_cookbooks=$cookbook"
s = Server.find($server)
raise "could not find server $1" unless s
Tag.set(s.href, [tag])
Tag.set(s.current_instance_href, [tag])
EOF
}

function gtb() {
  branches=`git branch -a | sed 's/[ *]//g' | sed 's#^.*/##' | grep $1 | sort -r | uniq`
  count=0
  for branch in $branches; do
    count=$(($count+1))
    if [[ "$count" -eq 1 ]]; then
      echo "Checking out branch $branch"
      git checkout $branch
    else
      echo "Also found branch $branch"
    fi
  done
  if [[ "$count" -eq 0 ]]; then
    echo "Could not find branch like $1"
  fi
}

function git_subrepo_set() {
  local url=`git config --get remote.origin.url | sed s/http(s)?/git/`
  git config --unset remote.origin.url
  git config --add remote.origin.url $url
}
  

function pd() {
  if [ "$1" = "-" ]; then
    popd > /dev/null
  else
    pushd $1 > /dev/null
  fi
}


function git_head_distances() {
  # first argument is an interesting commit/branch
  topical=$1

  local tmpfile=/tmp/git_find_remote_distances_tmp
  echo -n "" > $tmpfile
  git tag --contains $topical | grep -v HEAD | while read branch ; do
    distance=`git log --oneline $topical..$branch | wc -l`
    echo "$distance $branch" >> $tmpfile
  done
  git branch -r --contains $topical | grep -v HEAD | while read branch ; do
    distance=`git log --oneline $topical..$branch | wc -l`
    echo "$distance $branch" >> $tmpfile
  done
  cat $tmpfile | sort 
}

function git_pull_distances() {
  # first argument is an interesting commit/branch
  topical=$1

  local tmpfile=/tmp/git_find_remote_distances_tmp
  echo -n "" > $tmpfile
  git ls-remote | grep pull | grep head | while read branch ; do
    sha=`echo $branch | cut -d' ' -f 1`
    pull=`echo $branch | cut -d' ' -f 2`
    distance=`git log --oneline $topical..$sha| wc -l`
    echo "$distance $pull" >> $tmpfile
  done
  cat $tmpfile | sort 
}

function listsizes() {
  du -d 1 $1 | sort -n -r
}

function reindex() {
  pushd ~/Documents/rightimage_tools
  if [[ "$1" =~ reports ]]; then
    bucket=$1
  else
    if [[ ! "$1" =~ rightscale ]]; then
      bucket=rightscale-$1
    else
      bucket=$1
    fi
  fi
  echo bundle exec bin/update_s3_index $bucket
  bundle exec bin/update_s3_index $bucket
  popd
}

function ruconfig() {
  cfg_file=$HOME/.rightscale_upload_$1.json
  if [[ -e $cfg_file  ]]; then
    echo cp $cfg_file $HOME/.rightscale_upload.json
    cp $cfg_file $HOME/.rightscale_upload.json
  else
    echo "Could not find $cfg_file"
  fi
}


